# aliases and functions
alias config='/usr/bin/git --git-dir=/Users/evancarey/.cfg/ --work-tree=/Users/evancarey'
alias mgka="cd ~/prj/magic-kaito"
alias mgkb="cd ~/prj/magic-kaito-b"
alias mgkc="cd ~/prj/magic-kaito-c"
alias mgkd="cd ~/prj/magic-kaito-d"
alias act=". .env/bin/activate"
#alias alarms="pbpaste > /tmp/$$.txt && ./bin/integration_alarms.sh /tmp/$$.txt"
alias kp="kubectl config use-context arn:aws:eks:us-east-1:926134298613:cluster/anna-prod"
alias km="kubectl config use-context minikube"
alias brew='env PATH="${PATH//$(pyenv root)\/shims:/}" brew'
alias plog="~/bin/paste_to_log.sh ~/rpa-prod-logs/"
alias failedpods="kubectl get pods -n screen-scrapers --sort-by=.status.startTime --field-selector=status.phase=Failed"
#alias alarms="sortuuids $(./bin/failed_integrations.sh -t12h) > tmp.txt && groupbyemr tmp.txt && wc -l *-sorted.txt"

function ranksorted() {
  for i in `awk '{print $5}' ${1}-sorted.txt`; do grep ${i} ${2}; done | sort -nr -t, -k1
}

function sortuuids() {
  ./bin/fetch_creds.py|jq -r '.[]|{emrtype:."emr-type",uuid:."facility-uuid",url:.url,username:.username}|"\(.emrtype) \(.url) \(.username) \(.uuid) https://anna.paanalytics.com/config/facilities/\(.uuid)/integrations"'|sort|uniq
}

function sortpods() { sortuuids $(cat $@|cut -d'-' -f3-7|sort|uniq) }

function groupbyemr() {
  tmpf=$(mktemp)
  cat > ${tmpf}
  emrs=(aht matrix netsmart pcc sigmacare wellsky)
  for i in $emrs; do
    grep $i ${tmpf} > $i-sorted.txt
  done
  rm ${tmpf}
}

function uuid2url() {echo "https://anna.paanalytics.com/config/facilities/"${1}"/integrations"}
function uuids2urls() {
  for i in $@; do
    annaurl $i
  done
}

# run (by id) the scraper headless and drop profile and log files in ~/tmp
function byid() {
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | tr '/' '-')
  VAULT_SECRET_PATH="dirt/${1}" python -m cProfile -o ~/tmp/${BRANCH_NAME}-${1}.prof ./scraper_runner.py 2>&1 | tee ~/tmp/${BRANCH_NAME}-${1}.log
}

# run (by id) the scraper headless and drop profile and log files in ~/tmp
function byidh() {
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD | tr '/' '-')
  VAULT_SECRET_PATH="dirt/${1}" python -m cProfile -o ~/tmp/${BRANCH_NAME}-${1}.prof ./scraper_runner.py --headed 2>&1 | tee ~/tmp/${BRANCH_NAME}-${1}.log
}

# pull kaito logs for given UUID
function prdlogs() {
  mkdir -p ./tmp
  for i in $(kubectl -n screen-scrapers get pods | grep ${1} | cut -d ' ' -f 1); do
    echo $i
    kubectl -n screen-scrapers logs ${i} > ./tmp/${i}.log
  done
}

# pull kaito logs for list of UUIDs
function setofprdlogs() {
  for i in $@; do
    prdlogs $i
  done
}

# monitor docker stats for particular container
function mgkm() {
    while true; do docker stats --no-stream | grep ${1} | awk '{ if(index($4, "GiB")) {gsub("GiB","",$4); print $4*1000} else {gsub("MiB","",$4); print $4}}' | awk -v date="$(date +%T)" '{print $0", "date}'; sleep 1; done > ${1}.csv
}

function byida() { byid $(./bin/fetch_uuids.py aht | shuf -n1) }
function byidm() { byid $(./bin/fetch_uuids.py matrix | shuf -n1) }
function byidn() { byid $(./bin/fetch_uuids.py netsmart | shuf -n1) }
function byidp() { byid $(./bin/fetch_uuids.py pcc | shuf -n1) }
function byids() { byid $(./bin/fetch_uuids.py sigmacare | shuf -n1) }
function byidw() { byid $(./bin/fetch_uuids.py wellsky | shuf -n1) }
function byidha() { byidh $(./bin/fetch_uuids.py aht | shuf -n1) }
function byidhm() { byidh $(./bin/fetch_uuids.py matrix | shuf -n1) }
function byidhn() { byidh $(./bin/fetch_uuids.py netsmart | shuf -n1) }
function byidhp() { byidh $(./bin/fetch_uuids.py pcc | shuf -n1) }
function byidhs() { byidh $(./bin/fetch_uuids.py sigmacare | shuf -n1) }
function byidhw() { byidh $(./bin/fetch_uuids.py wellsky | shuf -n1) }

# convert downloaded base64 encoded file into pdf
function topdf() {
    cut -c29- ${1} | base64 --decode > ${1}.pdf
}
